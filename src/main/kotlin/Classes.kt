
/*
    The braces are optional as well.
*/
class Classes constructor() // Primary constructor can be defined using the constructor keyword.

class Classes2 () // This is also a valid syntax.

// Class with a constructor with 2 parameters
class Person(_firstName:String, _lastName:String) {
    val _firstName: String = _firstName
    val _lastName: String = _lastName

    init {
        // An init block is run when an instance of class is run. We can have multiple init blocks and they are initalized based on the order they are defined.
    }

    // The properties can be accessed after they are initialized.


}

//Having properties directly in the constructor
class PersonWithProperties(val firstName:String, val lastName:String)

//There can be a secondary constructor created which is an alternative means to instantiate your class

class PersonWithSecondaryConstructor(val firstName: String, val lastName: String) {
    init {
        println("Inside init block one")
    }
    constructor():this("Tony", "Stark") {
        println("Secondary constructor")
    }// Here the secondary constructor has to refer to the primary
    //Most of the cases in Kotlin, we might not need a secondary constructor

    init {
        println("Inside init block two")
    }
}


//Above class can be refactored to remove the secondary constructor with default arguments
class PersonWithSingleConstructorAndDefaultValues(val firstName: String="Tony", val lastName: String = "Stark")

//Properties in Kotlin will get the getters and setters generated by the compiler. The default behavior of getters and setters can be overridden. Example shown below:
//Need to understand how we can define getters and setters for different fields.

class PersonWithGettersAndSetters(val firstName: String = "Tony", val lastName: String = "Stark") {

    var nickName: String? = null
    set(value) {
        field = value
        println("Updated the nickname")
    }

    get() {
        println("Returned value is $field")
        return field
    }

    //Addint methods to a class
    fun printPerson() {
        val newName = nickName?: "No nickname"
        println("FirstName: $firstName, LastName $lastName, Nickname $newName")
    }

}

//Elvis operator in Kotlin (?:) - If LHS of the operator is not null then return that, otherwise return RHS - Line 63 demonstrates it

//Visibility of all classes is public by default in Kotlin
/*
    Visibility modifiers for classes and properties

    public - public by default
    internal - public within the module. In this case as it is a single module, it doesnt change anything
    private - Private class is only available within the class it is implemented
    protected - A protected method or property is only be available within that class or within any subclasses

 */

fun main() {
    var person = Person("Jarvis","Stark") //There is no new keyword. No constructor defined. If we don't have any properties or parameters defined, then the primary constructor can be omitted.

    //Property access syntax - We can access without the getters

    var person2 = PersonWithSecondaryConstructor()
    println("----------------------------------------------------")
    var person3 = PersonWithSingleConstructorAndDefaultValues()
    println(person3.firstName)
    println(person3.lastName)
    println("----------------------------------------------------")
    var person4 = PersonWithGettersAndSetters("Starky","Stark")
    person4.nickName = "Starkkk"
    println(person4.nickName)
    person4.nickName = null
    person4.printPerson()


}